Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $List = Elm.List.make(_elm),
   $Manifests$Update = Elm.Manifests.Update.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Routing = Elm.Routing.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Update = Elm.Update.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var routeRunTask = Elm.Native.Task.make(_elm).perform($Routing.run);
   var routerSignal = A2($Signal.map,
   $Update.RoutingAction,
   $Routing.signal);
   var init = function () {
      var fxs = _U.list([A2($Effects.map,
      $Update.ManifestAction,
      $Manifests$Update.getManifests)]);
      var fx = $Effects.batch(fxs);
      return {ctor: "_Tuple2"
             ,_0: {manifests: _U.list([])
                  ,pkgsinfos: _U.list([])
                  ,manifestForm: $Maybe.Nothing
                  ,routing: $Routing.initialModel}
             ,_1: fx};
   }();
   var app = $StartApp.start({init: init
                             ,update: $Update.update
                             ,view: $View.view
                             ,inputs: _U.list([routerSignal])});
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",
   app.tasks);
   var main = app.html;
   return _elm.Main.values = {_op: _op
                             ,init: init
                             ,app: app
                             ,routerSignal: routerSignal
                             ,main: main};
};